# AI Search System - Deployment Makefile
# Streamlined commands for building and deploying

.PHONY: help build dev prod runpod clean logs health test

# Default target
help:
	@echo "AI Search System - Deployment Commands"
	@echo "======================================"
	@echo ""
	@echo "Development:"
	@echo "  make dev          - Start development environment"
	@echo "  make logs         - View application logs"
	@echo "  make shell        - Access application shell"
	@echo ""
	@echo "Production:"
	@echo "  make prod         - Start production deployment"
	@echo "  make build        - Build production images"
	@echo ""
	@echo "RunPod GPU Cloud:"
	@echo "  make runpod       - Start RunPod deployment"
	@echo "  make runpod-build - Build RunPod-optimized image"
	@echo ""
	@echo "Development Quality:"
	@echo "  make lint         - Run code linting checks"
	@echo "  make format       - Format code with black & isort"
	@echo "  make typecheck    - Run mypy type checking"
	@echo "  make pytest       - Run pytest tests"
	@echo "  make check-all    - Run all quality checks"
	@echo ""
	@echo "Maintenance:"
	@echo "  make health       - Check system health"
	@echo "  make test         - Run API tests"
	@echo "  make clean        - Clean up containers and volumes"
	@echo "  make models       - Download default models"
	@echo ""

# Development environment
dev:
	@echo "🚀 Starting development environment..."
	docker-compose up --build

dev-detached:
	@echo "🚀 Starting development environment (background)..."
	docker-compose up --build -d

# Production deployment
prod:
	@echo "🏭 Starting production deployment..."
	docker-compose -f docker-compose.yml up --build -d

build:
	@echo "🔨 Building production images..."
	docker-compose -f docker-compose.yml build --no-cache

# RunPod deployment
runpod:
	@echo "🎮 Starting RunPod deployment..."
	docker-compose -f docker-compose.runpod.yml up --build

runpod-build:
	@echo "🔨 Building RunPod-optimized image..."
	docker-compose -f docker-compose.runpod.yml build --no-cache

# Maintenance commands
logs:
	@echo "📋 Viewing application logs..."
	docker-compose logs -f ai-search

health:
	@echo "🏥 Checking system health..."
	@curl -f http://localhost:8000/health || echo "❌ Health check failed"
	@echo ""
	@curl -f http://localhost:8000/system/status || echo "❌ System status failed"

test:
	@echo "🧪 Running API tests..."
	@curl -f http://localhost:8000/health/live || echo "❌ Liveness check failed"
	@curl -f http://localhost:8000/health/ready || echo "❌ Readiness check failed"
	@curl -f http://localhost:8000/api/v1/models/list || echo "❌ Models API failed"

# Development quality checks
lint:
	@echo "🔍 Running code quality checks..."
	@cd .. && python -m black --check app/
	@cd .. && python -m isort --check-only app/
	@cd .. && python -m ruff check app/ --select E,W,F --ignore E501
	@cd .. && python -m flake8 app/ --max-line-length=100 --ignore=E501,W503
	@echo "✅ All linting checks passed"

format:
	@echo "🎨 Formatting code..."
	@cd .. && python -m black app/
	@cd .. && python -m isort app/
	@echo "✅ Code formatted"

typecheck:
	@echo "🔍 Running type checking..."
	@cd .. && python -m mypy app/ --ignore-missing-imports --no-strict-optional --allow-untyped-defs
	@echo "✅ Type checking passed"

pytest:
	@echo "🧪 Running pytest..."
	@cd .. && python -m pytest tests/ -v --tb=short
	@echo "✅ Tests passed"

check-all: lint typecheck pytest
	@echo "✅ All checks passed - ready for commit!"

shell:
	@echo "💻 Accessing application shell..."
	docker exec -it ai-search-system /bin/bash

models:
	@echo "📦 Downloading default models..."
	@curl -X POST "http://localhost:8000/api/v1/models/download" \
		-H "Content-Type: application/json" \
		-d '{"model_name": "phi3:mini"}' || echo "❌ Model download failed"

clean:
	@echo "🧹 Cleaning up containers and volumes..."
	docker-compose down -v
	docker system prune -f

clean-all:
	@echo "🧹 Deep clean - removing all images and volumes..."
	docker-compose down -v --rmi all
	docker system prune -af

# Status monitoring
status:
	@echo "📊 System Status:"
	@echo "=================="
	@docker ps --filter "name=ai-search" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "🔗 Service URLs:"
	@echo "  API: http://localhost:8000"
	@echo "  Docs: http://localhost:8000/docs" 
	@echo "  Health: http://localhost:8000/health"
	@echo "  Ollama: http://localhost:11434"

# Environment setup
setup:
	@echo "⚙️  Setting up environment..."
	@if [ ! -f .env ]; then \
		cp .env.example .env; \
		echo "📝 Created .env from template - please edit with your API keys"; \
	else \
		echo "✅ .env file already exists"; \
	fi