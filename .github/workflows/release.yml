name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-build:
    name: Build Release Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.production
            image-suffix: production
            platforms: linux/amd64,linux/arm64
          - dockerfile: Dockerfile.runpod
            image-suffix: runpod
            platforms: linux/amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ matrix.image-suffix }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.image-suffix }}
          labels: |
            org.opencontainers.image.title=AI Search System
            org.opencontainers.image.description=LangGraph-orchestrated AI search with local Ollama and multi-provider integration
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'release'
    
    steps:
      - name: Update release with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            const deploymentInfo = `
            
            ## ðŸš€ Deployment Information
            
            ### Quick Start
            \`\`\`bash
            # Clone and deploy
            git clone ${{ github.server_url }}/${{ github.repository }}.git
            cd ${{ github.event.repository.name }}/deploy
            make setup && make dev
            \`\`\`
            
            ### Docker Images
            | Purpose | Image | Platforms |
            |---------|-------|-----------|
            | Production | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-production\` | linux/amd64, linux/arm64 |
            | RunPod GPU | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-runpod\` | linux/amd64 |
            
            ### Production Deployment
            \`\`\`bash
            docker run -d --name ai-search \\
              -p 8000:8000 \\
              -e REDIS_URL=redis://your-redis:6379 \\
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-production
            \`\`\`
            
            ### RunPod GPU Deployment
            \`\`\`bash
            docker run -d --gpus all --name ai-search \\
              -p 8000:8000 -p 11434:11434 \\
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-runpod
            \`\`\`
            
            ### Access Points
            - API: http://localhost:8000
            - Documentation: http://localhost:8000/docs
            - Health: http://localhost:8000/health
            - Model Management: http://localhost:8000/api/v1/models/list
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: release.body + deploymentInfo
            });