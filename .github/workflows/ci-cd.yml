name: CI/CD - Build, Test & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
          - runpod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # TESTING & VALIDATION
  # ================================
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run code formatting check
        run: |
          black --check --diff app/ || echo "⚠️ Code formatting issues found (non-blocking)"
          echo "✅ Code formatting check completed"

      - name: Run import sorting check  
        run: |
          isort --check-only --diff app/ || echo "⚠️ Import sorting issues found (non-blocking)"
          echo "✅ Import sorting check completed"

      - name: Run linting (ruff)
        run: |
          ruff check app/ --select E,W,F --ignore E501,F401,F841,W291 || echo "⚠️ Ruff linting issues found (non-blocking)"
          echo "✅ Ruff linting completed"

      - name: Run linting (flake8) 
        run: |
          flake8 app/ --max-line-length=100 --ignore=E501,W503,F401,F841,W291 || echo "⚠️ Flake8 linting issues found (non-blocking)"
          echo "✅ Flake8 linting completed"

      - name: Run type checking
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional --allow-untyped-defs
          echo "✅ Type checking passed"

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
          echo "✅ Tests passed"

  # ================================
  # DOCKER BUILD & PUSH
  # ================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.production
            image-suffix: production
            platforms: linux/amd64,linux/arm64
            target: production
          - dockerfile: Dockerfile.runpod
            image-suffix: runpod
            platforms: linux/amd64
            target: runpod-gpu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=-${{ matrix.image-suffix }},onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ================================
  # DEPLOYMENT TESTING
  # ================================
  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        deployment: [production, runpod]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test ${{ matrix.deployment }} deployment
        run: |
          cd deploy
          
          # Pull the built image
          IMAGE_TAG="pr-${{ github.event.number }}-${{ matrix.deployment }}"
          echo "Testing image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          
          # Start the deployment using deploy/ directory
          if [ "${{ matrix.deployment }}" = "runpod" ]; then
            docker-compose -f docker-compose.runpod.yml up -d
          else
            docker-compose -f docker-compose.yml up -d
          fi
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 60
          
          # Test health endpoints
          echo "🏥 Testing health endpoints..."
          curl -f http://localhost:8000/health/live || exit 1
          curl -f http://localhost:8000/health/ready || exit 1
          curl -f http://localhost:8000/health || exit 1
          
          # Test API endpoints
          echo "🧪 Testing API endpoints..."
          curl -f http://localhost:8000/api/v1/models/list || exit 1
          
          # Test model management API
          echo "📦 Testing model management..."
          curl -X POST http://localhost:8000/api/v1/models/download \
            -H "Content-Type: application/json" \
            -d '{"model_name": "phi3:mini"}' || echo "⚠️ Model download test skipped (requires Ollama)"
          
          echo "✅ Deployment test passed for ${{ matrix.deployment }}"
          
          # Cleanup
          docker-compose down -v

  # ================================
  # SECURITY SCANNING
  # ================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    strategy:
      matrix:
        image-suffix: [production, runpod]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.image-suffix }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image-suffix }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image-suffix }}.sarif'

  # ================================
  # DEPLOYMENT SUMMARY
  # ================================
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, test-deployment]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 AI Search System - Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Built Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Purpose | Platforms |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-production\` | Production deployment | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
          echo "| \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-runpod\` | RunPod GPU cloud | linux/amd64 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Quick Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Development" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "git clone ${{ github.server_url }}/${{ github.repository }}.git" >> $GITHUB_STEP_SUMMARY
          echo "cd ${{ github.event.repository.name }}/deploy" >> $GITHUB_STEP_SUMMARY
          echo "make setup  # Create .env from template" >> $GITHUB_STEP_SUMMARY
          echo "make dev    # Start development environment" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name ai-search-system \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8000:8000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e REDIS_URL=redis://your-redis:6379 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-production" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### RunPod GPU Cloud" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --gpus all --name ai-search-runpod \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8000:8000 -p 11434:11434 \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-runpod" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Access Points" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: http://localhost:8000" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: http://localhost:8000/docs" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: http://localhost:8000/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Model Management**: http://localhost:8000/api/v1/models/list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✨ Key Features" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **Local-first AI**: 85% inference via Ollama (phi3:mini)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Multi-provider Search**: Brave Search + ScrapingBee integration" >> $GITHUB_STEP_SUMMARY
          echo "- 🕸️ **LangGraph Orchestration**: Intelligent workflow management" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 **Model Management API**: HTTP-based model downloads" >> $GITHUB_STEP_SUMMARY
          echo "- 🎮 **RunPod Ready**: Terminal-safe deployment with TTY support" >> $GITHUB_STEP_SUMMARY
          echo "- 💰 **Cost Optimized**: Smart caching and budget controls" >> $GITHUB_STEP_SUMMARY