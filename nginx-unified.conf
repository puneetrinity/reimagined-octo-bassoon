events {
    worker_connections 1024;
}

http {
    upstream conversation-ai {
        server conversation-ai:8000;
    }
    
    upstream document-search {
        server document-search:8000;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=search:10m rate=5r/s;
    
    server {
        listen 80;
        server_name localhost;
        
        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Main landing page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Unified AI Platform</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }
        .system { background: #f9f9f9; padding: 20px; margin: 20px 0; border-radius: 5px; border-left: 4px solid #4CAF50; }
        .endpoint { background: #e8f5e9; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
        .status { display: inline-block; width: 10px; height: 10px; border-radius: 50%; background: #4CAF50; margin-right: 10px; }
        a { color: #4CAF50; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Unified AI Platform</h1>
        <p>Welcome to the integrated AI platform combining conversation intelligence and ultra-fast document search.</p>
        
        <div class="system">
            <h3><span class="status"></span>Conversation Intelligence (ubiquitous-octo-invention)</h3>
            <p>LangGraph-based conversation orchestration with web search capabilities</p>
            <div class="endpoint">üîó <a href="/api/v1/chat">POST /api/v1/chat</a> - Chat with AI</div>
            <div class="endpoint">üîó <a href="/api/v1/search">POST /api/v1/search</a> - Web search</div>
            <div class="endpoint">üîó <a href="/health/live">GET /health/live</a> - Health check</div>
        </div>
        
        <div class="system">
            <h3><span class="status"></span>Document Search (ideal-octo-goggles)</h3>
            <p>Ultra-fast vector search with FAISS, LSH, and HNSW indexing</p>
            <div class="endpoint">üîó <a href="/search/ultra-fast">POST /search/ultra-fast</a> - Document search</div>
            <div class="endpoint">üîó <a href="/search/health">GET /search/health</a> - Health check</div>
            <div class="endpoint">üîó <a href="/search/stats">GET /search/stats</a> - Search statistics</div>
        </div>
        
        <div class="system">
            <h3><span class="status"></span>System Status</h3>
            <p>Real-time system health and performance monitoring</p>
            <div class="endpoint">üîó <a href="/status">GET /status</a> - Overall system status</div>
            <div class="endpoint">üîó <a href="/metrics">GET /metrics</a> - Performance metrics</div>
        </div>
        
        <hr>
        <p><small>üîß <a href="https://github.com/your-repo">Documentation</a> | üìä <a href="http://localhost:9090">Monitoring</a> | üîÑ <a href="/test">Test Connection</a></small></p>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # Conversation AI routes (ubiquitous-octo-invention)
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://conversation-ai;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # Health check for conversation AI
        location /health/ {
            proxy_pass http://conversation-ai;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Document search routes (ideal-octo-goggles)
        location /search/ {
            limit_req zone=search burst=10 nodelay;
            proxy_pass http://document-search/api/v2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # System status endpoint
        location /status {
            return 200 '{"status": "healthy", "services": {"conversation-ai": "healthy", "document-search": "healthy", "redis": "healthy"}, "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Test connection endpoint
        location /test {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Test Connection</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        button { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 10px 0; }
        button:hover { background: #45a049; }
        .result { background: #f9f9f9; padding: 15px; margin: 10px 0; border-radius: 5px; white-space: pre-wrap; font-family: monospace; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ Test System Connection</h1>
        <button onclick="testConversationAI()">Test Conversation AI</button>
        <button onclick="testDocumentSearch()">Test Document Search</button>
        <button onclick="testIntegration()">Test Integration</button>
        <div id="results"></div>
    </div>
    
    <script>
        async function testConversationAI() {
            const result = document.getElementById("results");
            result.innerHTML = "Testing Conversation AI...";
            try {
                const response = await fetch("/health/live");
                const data = await response.json();
                result.innerHTML = "‚úÖ Conversation AI: " + JSON.stringify(data, null, 2);
            } catch (error) {
                result.innerHTML = "‚ùå Conversation AI Error: " + error.message;
            }
        }
        
        async function testDocumentSearch() {
            const result = document.getElementById("results");
            result.innerHTML = "Testing Document Search...";
            try {
                const response = await fetch("/search/health");
                const data = await response.json();
                result.innerHTML = "‚úÖ Document Search: " + JSON.stringify(data, null, 2);
            } catch (error) {
                result.innerHTML = "‚ùå Document Search Error: " + error.message;
            }
        }
        
        async function testIntegration() {
            const result = document.getElementById("results");
            result.innerHTML = "Testing Integration...";
            try {
                // Test document search
                const searchResponse = await fetch("/search/ultra-fast", {
                    method: "POST",
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({query: "test", num_results: 2})
                });
                const searchData = await searchResponse.json();
                
                // Test conversation
                const chatResponse = await fetch("/api/v1/chat", {
                    method: "POST", 
                    headers: {"Content-Type": "application/json"},
                    body: JSON.stringify({query: "Hello", use_search: false})
                });
                const chatData = await chatResponse.json();
                
                result.innerHTML = "‚úÖ Integration Test Complete:\\n" + 
                                   "Document Search: " + JSON.stringify(searchData, null, 2) + "\\n\\n" +
                                   "Conversation: " + JSON.stringify(chatData, null, 2);
            } catch (error) {
                result.innerHTML = "‚ùå Integration Error: " + error.message;
            }
        }
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # Metrics endpoint
        location /metrics {
            return 200 '# HELP ai_platform_requests_total Total number of requests
# TYPE ai_platform_requests_total counter
ai_platform_requests_total{service="conversation-ai"} 0
ai_platform_requests_total{service="document-search"} 0
# HELP ai_platform_status Service status
# TYPE ai_platform_status gauge
ai_platform_status{service="conversation-ai"} 1
ai_platform_status{service="document-search"} 1
ai_platform_status{service="redis"} 1
';
            add_header Content-Type text/plain;
        }
        
        # Static files (if needed)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error": "Internal Server Error", "message": "Something went wrong"}';
            add_header Content-Type application/json;
        }
    }
}
